<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="MACHINE.txt" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="address" type="required" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="model.Field1546fb2">
	</Field>
	<Field name="opcode" type="required" numBits="4" relativity="absolute" signed="true" defaultValue="0" id="model.Fieldc25c79">
	</Field>
	<Field name="operation" type="required" numBits="16" relativity="absolute" signed="true" defaultValue="0" id="model.Fieldd605fb">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="ac" width="16" initialValue="0" readOnly="false" id="model.module.Registerac51a8" />
	<Register name="ar" width="12" initialValue="0" readOnly="false" id="model.module.Registerf097b5" />
	<Register name="dr" width="16" initialValue="0" readOnly="false" id="model.module.Register164e362" />
	<Register name="e" width="1" initialValue="0" readOnly="false" id="model.module.Register1f7b926" />
	<Register name="fgi" width="1" initialValue="0" readOnly="false" id="model.module.Register1de9ea1" />
	<Register name="fgo" width="1" initialValue="0" readOnly="false" id="model.module.Register19dfa10" />
	<Register name="i" width="1" initialValue="0" readOnly="false" id="model.module.Register11a6172" />
	<Register name="inpr" width="8" initialValue="0" readOnly="false" id="model.module.Register120de3e" />
	<Register name="ir" width="16" initialValue="0" readOnly="false" id="model.module.Register4e6b6d" />
	<Register name="outr" width="8" initialValue="0" readOnly="false" id="model.module.Register535cce" />
	<Register name="pc" width="12" initialValue="0" readOnly="false" id="model.module.Registerd6b687" />
	<Register name="s" width="1" initialValue="0" readOnly="false" id="model.module.Register14251cd" />
	<Register name="tr" width="16" initialValue="0" readOnly="false" id="model.module.Register22574b" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="halt" bit="0" register="model.module.Register14251cd" halt="true" id="model.module.ConditionBit5bd0ed" />

	<!--............. rams ..........................-->
	<RAM name="main" length="4096" cellSize="16" id="model.module.RAM14e3b2f" />

	<!--............. set ...........................-->
	<Set name="ac &lt;- 0" register="model.module.Registerac51a8" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSetfce70a" />
	<Set name="e &lt;- 0" register="model.module.Register1f7b926" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSetb68430" />

	<!--............. test ..........................-->
	<Test name="if (ac != 0)" register="model.module.Registerac51a8" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Testc64939" />
	<Test name="if (ac (15) != 0)" register="model.module.Registerac51a8" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test1970d85" />
	<Test name="if (ac (15) != 1)" register="model.module.Registerac51a8" start="0" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test506e8a" />
	<Test name="if (dr != 0)" register="model.module.Register164e362" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Testf5ed74" />
	<Test name="if (e != 0)" register="model.module.Register1f7b926" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test88f552" />

	<!--............. increment .....................-->
	<Increment name="ac &lt;- ac + 1" register="model.module.Registerac51a8" overflowBit="model.module.ConditionBit5bd0ed" delta="1" id="model.microinstruction.Increment14e2323" />
	<Increment name="ar &lt;- ar + 1" register="model.module.Registerf097b5" overflowBit="model.module.ConditionBit5bd0ed" delta="1" id="model.microinstruction.Increment6f36fe" />
	<Increment name="dr &lt;- dr + 1" register="model.module.Register164e362" overflowBit="model.module.ConditionBit5bd0ed" delta="1" id="model.microinstruction.Increment1eaea0a" />
	<Increment name="pc &lt;- pc + 1" register="model.module.Registerd6b687" overflowBit="model.module.ConditionBit5bd0ed" delta="1" id="model.microinstruction.Incrementc9a180" />

	<!--............. shift .........................-->
	<Shift name="ac &lt;- shl ac" type="cyclic" source="model.module.Registerac51a8" destination="model.module.Registerac51a8" direction="left" distance="1" id="model.microinstruction.Shift2fb02b" />
	<Shift name="ac &lt;- shr ac" type="cyclic" source="model.module.Registerac51a8" destination="model.module.Registerac51a8" direction="right" distance="1" id="model.microinstruction.Shift7beba6" />

	<!--............. logical .......................-->
	<Logical name="ac &lt;- ac ^ dr" type="AND" source1="model.module.Registerac51a8" source2="model.module.Register164e362" destination="model.module.Registerac51a8" id="model.microinstruction.Logicalf764d" />
	<Logical name="ac &lt;- ac nand dr" type="NAND" source1="model.module.Registerac51a8" source2="model.module.Registerac51a8" destination="model.module.Registerac51a8" id="model.microinstruction.Logicalc34c6e" />
	<Logical name="ac &lt;- ac nor dr" type="NOR" source1="model.module.Registerac51a8" source2="model.module.Registerac51a8" destination="model.module.Registerac51a8" id="model.microinstruction.Logicale820c5" />
	<Logical name="ac &lt;- ac or dr" type="OR" source1="model.module.Registerac51a8" source2="model.module.Registerac51a8" destination="model.module.Registerac51a8" id="model.microinstruction.Logical199a8da" />
	<Logical name="ac &lt;- ac xor dr" type="XOR" source1="model.module.Registerac51a8" source2="model.module.Registerac51a8" destination="model.module.Registerac51a8" id="model.microinstruction.Logicalfd1e7a" />
	<Logical name="ac &lt;- ac'" type="NOT" source1="model.module.Registerac51a8" source2="model.module.Registerac51a8" destination="model.module.Registerac51a8" id="model.microinstruction.Logicaled8cf7" />
	<Logical name="e &lt;- e'" type="NOT" source1="model.module.Register1f7b926" source2="model.module.Register1f7b926" destination="model.module.Register1f7b926" id="model.microinstruction.Logical14e72e7" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="ac &lt;- ac + dr" type="ADD" source1="model.module.Registerac51a8" source2="model.module.Register164e362" destination="model.module.Registerac51a8" overflowBit="model.module.ConditionBit5bd0ed" carryBit="model.module.ConditionBit5bd0ed" id="model.microinstruction.Arithmetic1f3c42c" />
	<Arithmetic name="ac &lt;- ac - dr" type="SUBTRACT" source1="model.module.Registerac51a8" source2="model.module.Register164e362" destination="model.module.Registerac51a8" overflowBit="model.module.ConditionBit5bd0ed" carryBit="model.module.ConditionBit5bd0ed" id="model.microinstruction.Arithmetic16319a6" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="ac (0) &lt;- e" source="model.module.Register1f7b926" srcStartBit="0" dest="model.module.Registerac51a8" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR143a989" />
	<TransferRtoR name="ac (15) &lt;- e" source="model.module.Register1f7b926" srcStartBit="0" dest="model.module.Registerac51a8" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR162218c" />
	<TransferRtoR name="ac &lt;- dr" source="model.module.Register164e362" srcStartBit="0" dest="model.module.Registerac51a8" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoRc753a8" />
	<TransferRtoR name="ar &lt;- ir (0-11)" source="model.module.Register4e6b6d" srcStartBit="4" dest="model.module.Registerf097b5" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR106de7f" />
	<TransferRtoR name="ar &lt;- pc" source="model.module.Registerd6b687" srcStartBit="0" dest="model.module.Registerf097b5" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR1c937b7" />
	<TransferRtoR name="e &lt;- ac (0)" source="model.module.Registerac51a8" srcStartBit="15" dest="model.module.Register1f7b926" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR19307c3" />
	<TransferRtoR name="e &lt;- ac (15)" source="model.module.Registerac51a8" srcStartBit="0" dest="model.module.Register1f7b926" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1a1574a" />
	<TransferRtoR name="i &lt;- ir (15)" source="model.module.Register4e6b6d" srcStartBit="0" dest="model.module.Register11a6172" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR5f9027" />
	<TransferRtoR name="pc &lt;- ar" source="model.module.Registerf097b5" srcStartBit="0" dest="model.module.Registerd6b687" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR9f7e54" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="decode ir" ir="model.module.Register4e6b6d" id="model.microinstruction.Decode163cf5b" />

	<!--............. set condition bit .............-->
	<SetCondBit name="halt &lt;- 1" bit="model.module.ConditionBit5bd0ed" value="1" id="model.microinstruction.SetCondBitd3dafa" />

	<!--............. io ............................-->
	<IO name="input" direction="input" type="integer" buffer="model.module.Registerac51a8" connection="[Console]" id="model.microinstruction.IO5bb0ef" />
	<IO name="output" direction="output" type="integer" buffer="model.module.Registerac51a8" connection="[Console]" id="model.microinstruction.IO1d3152e" />

	<!--............. memory access .................-->
	<MemoryAccess name="ar &lt;- m[ar]" direction="read" memory="model.module.RAM14e3b2f" data="model.module.Registerf097b5" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccess9b1198" />
	<MemoryAccess name="dr &lt;- m[ar]" direction="read" memory="model.module.RAM14e3b2f" data="model.module.Register164e362" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccesse51fbb" />
	<MemoryAccess name="ir &lt;- m[ar]" direction="read" memory="model.module.RAM14e3b2f" data="model.module.Register4e6b6d" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccess1560400" />
	<MemoryAccess name="m[ar] &lt;- ac" direction="write" memory="model.module.RAM14e3b2f" data="model.module.Registerac51a8" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccesse31921" />
	<MemoryAccess name="m[ar] &lt;- dr" direction="write" memory="model.module.RAM14e3b2f" data="model.module.Register164e362" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccess2ac4f4" />
	<MemoryAccess name="m[ar] &lt;- pc" direction="write" memory="model.module.RAM14e3b2f" data="model.module.Registerd6b687" address="model.module.Registerf097b5" id="model.microinstruction.MemoryAccess661bcd" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End1b36305" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR1c937b7" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess1560400" />
		<Microinstruction microRef="model.microinstruction.Incrementc9a180" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f9027" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR106de7f" />
		<Microinstruction microRef="model.microinstruction.Decode163cf5b" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="nand" opcode="c" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#92d7d5 #e8f1b1" assemblyColors="#92d7d5 #e8f1b1" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess9b1198" />
		<Microinstruction microRef="model.microinstruction.Logicalc34c6e" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="xor" opcode="b" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#a7bdd0 #d4eea3" assemblyColors="#a7bdd0 #d4eea3" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess9b1198" />
		<Microinstruction microRef="model.microinstruction.Logicalfd1e7a" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="nor" opcode="a" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#91a7d7 #f886a8" assemblyColors="#91a7d7 #f886a8" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess9b1198" />
		<Microinstruction microRef="model.microinstruction.Logicale820c5" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="or" opcode="9" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#9c9fdc #a5d7e6" assemblyColors="#9c9fdc #a5d7e6" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess9b1198" />
		<Microinstruction microRef="model.microinstruction.Logical199a8da" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="not" opcode="8" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f5ecd3" assemblyColors="#f5ecd3" >
		<Microinstruction microRef="model.microinstruction.Logicaled8cf7" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="sub" opcode="7" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#efb2d8 #97bcbc" assemblyColors="#efb2d8 #97bcbc" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse51fbb" />
		<Microinstruction microRef="model.microinstruction.Arithmetic16319a6" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="out" opcode="f400" instructionFormat="operation" assemblyFormat="operation" instructionColors="#9d89e9" assemblyColors="#9d89e9" >
		<Microinstruction microRef="model.microinstruction.IO1d3152e" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="inp" opcode="f800" instructionFormat="operation" assemblyFormat="operation" instructionColors="#a9ebd2" assemblyColors="#a9ebd2" >
		<Microinstruction microRef="model.microinstruction.IO5bb0ef" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="hlt" opcode="7001" instructionFormat="operation" assemblyFormat="operation" instructionColors="#a08ee7" assemblyColors="#a08ee7" >
		<Microinstruction microRef="model.microinstruction.SetCondBitd3dafa" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="sze" opcode="7002" instructionFormat="operation" assemblyFormat="operation" instructionColors="#80d4bf" assemblyColors="#80d4bf" >
		<Microinstruction microRef="model.microinstruction.Test88f552" />
		<Microinstruction microRef="model.microinstruction.Incrementc9a180" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="sna" opcode="7008" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f88bbb" assemblyColors="#f88bbb" >
		<Microinstruction microRef="model.microinstruction.Test506e8a" />
		<Microinstruction microRef="model.microinstruction.Incrementc9a180" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="spa" opcode="7010" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f78dbf" assemblyColors="#f78dbf" >
		<Microinstruction microRef="model.microinstruction.Test1970d85" />
		<Microinstruction microRef="model.microinstruction.Incrementc9a180" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="inc" opcode="7020" instructionFormat="operation" assemblyFormat="operation" instructionColors="#c6f1eb" assemblyColors="#c6f1eb" >
		<Microinstruction microRef="model.microinstruction.Increment14e2323" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="cil" opcode="7040" instructionFormat="operation" assemblyFormat="operation" instructionColors="#84b38f" assemblyColors="#84b38f" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR1a1574a" />
		<Microinstruction microRef="model.microinstruction.Shift2fb02b" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR143a989" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="cir" opcode="7080" instructionFormat="operation" assemblyFormat="operation" instructionColors="#ccd1f5" assemblyColors="#ccd1f5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR19307c3" />
		<Microinstruction microRef="model.microinstruction.Shift7beba6" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR162218c" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="cme" opcode="7100" instructionFormat="operation" assemblyFormat="operation" instructionColors="#cdd2fe" assemblyColors="#cdd2fe" >
		<Microinstruction microRef="model.microinstruction.Logical14e72e7" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="cma" opcode="7200" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f9a6c3" assemblyColors="#f9a6c3" >
		<Microinstruction microRef="model.microinstruction.Logicaled8cf7" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="cla" opcode="7800" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f49ed9" assemblyColors="#f49ed9" >
		<Microinstruction microRef="model.microinstruction.CpusimSetfce70a" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="isz" opcode="6" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#f1d9e3 #ceeaf1" assemblyColors="#f1d9e3 #ceeaf1" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse51fbb" />
		<Microinstruction microRef="model.microinstruction.Increment1eaea0a" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess2ac4f4" />
		<Microinstruction microRef="model.microinstruction.Testf5ed74" />
		<Microinstruction microRef="model.microinstruction.Incrementc9a180" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="bsa" opcode="5" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#969db8 #c3ccad" assemblyColors="#969db8 #c3ccad" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess661bcd" />
		<Microinstruction microRef="model.microinstruction.Increment6f36fe" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR9f7e54" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="bun" opcode="4" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#85f3db #9abfc7" assemblyColors="#85f3db #9abfc7" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR9f7e54" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="sta" opcode="3" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#9cf7bb #a98eb5" assemblyColors="#9cf7bb #a98eb5" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse31921" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="lda" opcode="2" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#d08dea #8cda95" assemblyColors="#d08dea #8cda95" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse51fbb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoRc753a8" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="1" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#81a0d6 #c981e0" assemblyColors="#81a0d6 #c981e0" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse51fbb" />
		<Microinstruction microRef="model.microinstruction.Arithmetic1f3c42c" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<MachineInstruction name="and" opcode="0" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#fb87b1 #eee382" assemblyColors="#fb87b1 #eee382" >
		<Microinstruction microRef="model.microinstruction.MemoryAccesse51fbb" />
		<Microinstruction microRef="model.microinstruction.Logicalf764d" />
		<Microinstruction microRef="model.microinstruction.End1b36305" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM14e3b2f" startingAddress="34" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
